var request	= require('request');

module.exports = Connection;

var payload = {
	"rowset":	{
			"coldesc": [ {
					"type": "string",
					"name": "Identifier"
			}, {
					"type": "string",
					"name": "Node"
			}, {
					"type": "string",
					"name": "AlertKey"
			}, {
					"type": "integer",
					"name": "Severity"
			}, {
					"type": "string",
					"name": "Summary"
			}, {
					"type": "utc",
					"name": "FirstOccurrence"
			}, {
					"type": "utc",
					"name": "LastOccurrence"
			}, {
					"type": "integer",
					"name": "OwnerUID"
			}, {
					"type": "integer",
					"name": "OwnerGID"
			}],
			"rows":	[ {
					"FirstOccurrence": 1341412087,
					"Node": "localhost",
					"AlertKey": "JUnitEventInstance",
					"Summary": "This is a test event generated by the JUnit REST Event Tests.(1)",
					"LastOccurrence": 1341412087,
					"Identifier": "JunitEventTestInstance####1",
					"OwnerGID": 0,
					"Severity": 4,
					"OwnerUID": 0
		}]
	}
};

function Connection(options) {
	this.config = options.config;
	this._httpAuth = 'Basic ' + new Buffer(this.config.user + ':' + this.config.password).toString('base64');
}

Connection.prototype.query = function query(sql, callback) {

	// Convert the sql statement to parameters
	var restOptions = Connection.queryBuilder(sql);

	// Create the Objectserver URI
	this.config.path = 	'/objectserver/restapi/'+restOptions.path+
	   					'?collist='+restOptions.collist+
	   					'&filter='+restOptions.filter+
	   					'&orderby='+restOptions.orderBy;

	var url = 'http://'+this.config.host+':'+this.config.port+this.config.path;
	
	request({
		url: url, 
		headers : {
			'Host': 'localhost',
			'Authorization': this._httpAuth
		}
	}, function(error, response, body) {
			var obj = JSON.parse(body);
	      	callback(error, obj.rowset.rows, obj.rowset.affectedRows, obj.rowset.coldesc);
	 });
}

Connection.queryBuilder = function(sql) {
	// Converts a Objectserver SQL to REST call
	// SELECT Node, Summary FROM alerts.status where Severity > 0
	var restOptions = {};

	// Get REST keyword (SELECT, UPDATE, PUT, DELETE)
	var keyword = sql.substr(0, sql.indexOf(" ")); // First word of sql string
	
	switch(keyword.toUpperCase()) {
		case 'SELECT' :			
			restOptions.method = 'GET';
			break;
		case 'UPDATE' :
			restOptions.method = 'PATCH';
			break;
		case 'INSERT' :
			restOptions.method = 'POST';
			break;
		case 'DELETE' :
			restOptions.method = 'DELETE';
		default:
			throw new Error('Cannot find keyword \'' + keyword + '\'');
	}

	// get collist (Node, Summary) - Only for Select
	if(restOptions.method==='GET')
	{
		var rexpression = new RegExp(keyword+' ([A-Za-z0-9,\-\\s\*]+) [Ff][Rr][Oo][Mm] ');
		var colmatch = sql.match(rexpression);
		if (!colmatch){
			collist[1] = '*' // No columns selected, get all
		}
		var collist = colmatch[1].replace(/ /g,''); // Remove whitespaces
		if (collist === '*') {
			restOptions.collist = ''
		} else {
			restOptions.collist = encodeURI(collist);
		}
	}

	// Get REST path (database) - Only for SELECT, DELETE
	if(restOptions.method==='GET' || restOptions.method==='DELETE')
	{
		var rexpression = new RegExp(keyword+' .* [Ff][Rr][Oo][Mm] ([A-Za-z0-9]+\.[A-Za-z0-9]+)');
		var dbmatch = sql.match(rexpression);
		if (!dbmatch) {
			// no database selected, trow error
			throw new Error('No database selected!');
		}
		var database = dbmatch[1];
		restOptions.path = database.replace('.','/');
	}


	// get REST filter - ONLY FOR GET
	if(restOptions.method==='GET')
	{
		restOptions.orderBy='';
		restOptions.filter='';
		// check if sql contains 'order by'
		if (sql.match('.*[Oo][Rr][Dd][Ee][Rr] [Bb][Yy].*'))
		{
			var rexpression = new RegExp('.* [Ww][Hh][Ee][Rr][Ee] (.*) [Oo][Rr][Dd][Ee][Rr] [Bb][Yy].*');
			var filtermatch = sql.match(rexpression);
			if(!filtermatch) {
				restOptions.filter=''
			} else {
				restOptions.filter=encodeURI(filtermatch[1]);
			}
			// get orderby
			var rexpression = new RegExp('.* [Oo][Rr][Dd][Ee][Rr] [Bb][Yy] (.*)');
			var orderbymatch = sql.match(rexpression);
			if(!orderbymatch) {
				restOptions.orderBy=''
			}
			else {
				restOptions.orderBy=encodeURI(orderbymatch[1]);
			}
		}
		else {
			// No order by
			var rexpression = new RegExp('.* [Ww][Hh][Ee][Rr][Ee] (.*)$');
			var filtermatch = sql.match(rexpression);
			if(!filtermatch) {
				restOptions.filter=''
			} else {
				restOptions.filter=encodeURI(filtermatch[1]);
			}
		}
	}

	rexpression = null;
	return restOptions;


}